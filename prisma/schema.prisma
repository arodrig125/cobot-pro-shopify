generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  name           String?
  shopifyUserId  String?  @unique
  shopDomain     String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  stores         Store[]  @relation("UserStores")
  upsellRules    Upsell[] @relation("UserUpsells")
  analytics      Analytics[] @relation("UserAnalytics")
  plan           UserPlan?
  referralsGiven Referral[] @relation("ReferrerRelation")
  referredBy     Referral[] @relation("ReferredRelation")
  credits        Credit[]
}

model Store {
  id             Int      @id @default(autoincrement())
  shopifyStoreId String   @unique
  domain         String   @unique
  name           String?
  accessToken    String?
  isActive       Boolean  @default(true)
  plan           String   @default("FREE")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  users          User[]   @relation("UserStores")
  upsellRules    Upsell[] @relation("StoreUpsells")
  analytics      Analytics[] @relation("StoreAnalytics")
}

model Upsell {
  id                Int      @id @default(autoincrement())
  triggerProductId  String
  upsellProductId   String
  message           String   @default("")
  discount          Float?   // Percentage discount to apply
  discountType      String?  // PERCENTAGE, FIXED_AMOUNT, etc.
  placement         String   @default("CART") // CART, PRODUCT_PAGE, POST_PURCHASE, etc.
  displayStyle      String   @default("STANDARD") // STANDARD, POPUP, SIDEBAR, etc.
  conditions        Json?    // JSON object with conditions (cart value, customer type, etc.)
  priority          Int      @default(1) // Higher priority rules are shown first
  isActive          Boolean  @default(true)
  conversionRate    Float?   // Percentage of times this upsell was accepted
  impressions       Int      @default(0) // Number of times this upsell was shown
  conversions       Int      @default(0) // Number of times this upsell was accepted
  revenue           Float    @default(0) // Revenue generated by this upsell
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  storeId           Int?
  userId            Int?
  store             Store?   @relation("StoreUpsells", fields: [storeId], references: [id])
  user              User?    @relation("UserUpsells", fields: [userId], references: [id])
  abTests           ABTest[] @relation("UpsellTests")
}

model Analytics {
  id                Int      @id @default(autoincrement())
  date              DateTime @default(now())
  impressions       Int      @default(0) // Number of upsell impressions
  conversions       Int      @default(0) // Number of upsell conversions
  revenue           Float    @default(0) // Revenue from upsells
  averageOrderValue Float?   // Average order value with upsells
  baseOrderValue    Float?   // Average order value without upsells
  storeId           Int?
  userId            Int?
  store             Store?   @relation("StoreAnalytics", fields: [storeId], references: [id])
  user              User?    @relation("UserAnalytics", fields: [userId], references: [id])
}

model ABTest {
  id                Int      @id @default(autoincrement())
  name              String
  description       String?
  startDate         DateTime @default(now())
  endDate           DateTime?
  status            String   @default("ACTIVE") // ACTIVE, COMPLETED, PAUSED
  variantA          Int      // Reference to first upsell variant
  variantB          Int      // Reference to second upsell variant
  winningVariant    Int?     // Reference to winning upsell variant
  impressionsA      Int      @default(0)
  conversionsA      Int      @default(0)
  impressionsB      Int      @default(0)
  conversionsB      Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  upsells           Upsell[] @relation("UpsellTests")
}

model PlanLimits {
  id              Int      @id @default(autoincrement())
  planName        String   @unique
  maxRules        Int
  hasAdvAnalytics Boolean  @default(false)
  hasABTesting    Boolean  @default(false)
  placements      String   // Comma-separated list: "CART,PRODUCT_PAGE,POST_PURCHASE"
  hasCustomization Boolean  @default(false)
  supportLevel    String   // e.g. "COMMUNITY", "EMAIL", "PRIORITY", "DEDICATED"
  hasWhiteLabel   Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model UserPlan {
  id              Int       @id @default(autoincrement())
  userId          Int       @unique
  planName        String    // "FREE", "GROWTH", "PRO", "ENTERPRISE"
  isTrialing      Boolean   @default(false)
  trialEndsAt     DateTime?
  additionalRules Int       @default(0) // For referral bonuses
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id])
}

model Referral {
  id              Int       @id @default(autoincrement())
  referrerId      Int
  referredId      Int?
  referralCode    String    @unique
  referralLink    String
  status          String    // "PENDING", "SIGNED_UP", "UPGRADED"
  creditApplied   Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  referrer        User      @relation("ReferrerRelation", fields: [referrerId], references: [id])
  referred        User?     @relation("ReferredRelation", fields: [referredId], references: [id])
}

model Credit {
  id              Int       @id @default(autoincrement())
  userId          Int
  amount          Float
  description     String
  expiresAt       DateTime?
  isUsed          Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id])
}